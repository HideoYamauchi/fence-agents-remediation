apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: '[]'
    capabilities: Basic Install
    categories: OpenShift Optional
    containerImage: ""
    createdAt: ""
    description: Fence Agents Remediation Operator provides high availability for
      Kubernetes nodes in an automatic manner using well-known fence agents.
    olm.skipRange: '>=0.0.1'
    repository: https://github.com/medik8s/fence-agents-remediation
    support: Medik8s
  name: fence-agents-remediation.v0.0.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: FenceAgentsRemediation is the Schema for the fenceagentsremediations
        API
      displayName: Fence Agents Remediation
      kind: FenceAgentsRemediation
      name: fenceagentsremediations.fence-agents-remediation.medik8s.io
      resources:
      - kind: FenceAgentsRemediation
        name: fenceagentsremediations
        version: v1alpha1
      specDescriptors:
      - description: Agent is the name of fence agent that will be used
        displayName: Agent
        path: agent
      - description: NodeParameters are passed to the fencing agent according to the
          node that is fenced, since they are node specific
        displayName: Node Parameters
        path: nodeparameters
      - description: SharedParameters are passed to the fencing agent regardless of
          which node is about to be fenced (i.e., they are common for all the nodes)
        displayName: Shared Parameters
        path: sharedparameters
      statusDescriptors:
      - description: 'Represents the observations of a FenceAgentsRemediation''s current
          state. Known .status.conditions.type are: "Processing", "FenceAgentActionSucceeded",
          and "Succeeded".'
        displayName: conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      - description: LastUpdateTime is the last time the status was updated.
        displayName: Last Update Time
        path: lastUpdateTime
      version: v1alpha1
    - description: FenceAgentsRemediationTemplate is the Schema for the fenceagentsremediationtemplates
        API
      displayName: Fence Agents Remediation Template
      kind: FenceAgentsRemediationTemplate
      name: fenceagentsremediationtemplates.fence-agents-remediation.medik8s.io
      resources:
      - kind: FenceAgentsRemediationTemplate
        name: fenceagentsremediationtemplates
        version: v1alpha1
      specDescriptors:
      - description: Template defines the desired state of FenceAgentsRemediationTemplate
        displayName: Template
        path: template
      - description: Agent is the name of fence agent that will be used
        displayName: Agent
        path: template.spec.agent
      - description: NodeParameters are passed to the fencing agent according to the
          node that is fenced, since they are node specific
        displayName: Node Parameters
        path: template.spec.nodeparameters
      - description: SharedParameters are passed to the fencing agent regardless of
          which node is about to be fenced (i.e., they are common for all the nodes)
        displayName: Shared Parameters
        path: template.spec.sharedparameters
      version: v1alpha1
  description: |
    Fence Agents Remediation (*FAR*) is a Kubernetes operator that provides high availability for Kubernetes nodes in an automatic manner.
    Using a management interface or traditional API, FAR runs a fence agent to remediate a node from an unhealthy state by power cycling the node.
    By doing so it minimizes downtime for stateful applications and restores compute capacity if transient failures occur.

    FAR is one of the remediator operators by [Medik8s](https://www.medik8s.io/remediation/remediation/),
    such as [Self Node Remediation](https://github.com/medik8s/self-node-remediation) and [Machine Deletion Remediation](https://github.com/medik8s/machine-deletion-remediation),
    that were designed to run with the Node HealthCheck Operator [(NHC)](https://github.com/medik8s/node-healthcheck-operator) as an external remediator.
    It is recommended to use FAR with NHC for an easier and smoother experience, but it can be used as a standalone remediator for the more experienced user.

    FAR is recommended when a node becomes unhealthy, and we want to completely isolate the node from a cluster, since we can not “trust” the unhealthy node,
    to prevent it from accessing the shared resources like [RWO volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes).
    Moreover, FAR is robust as it can remediate an unhealthy node using a management interface (e.g., IPMI) while still keeping control plane connectivity,
    and it is diverse since it includes [numerous fence agents](https://github.com/ClusterLabs/fence-agents) to choose from, and each one of them
    is designed for different types of clusters, such as bare metal servers, virtual machines, cloud platforms, etc.
  displayName: Fence Agents Remediation Operator
  icon:
  - base64data: base64EncodedIcon
    mediatype: image/png
  install:
    spec:
      deployments: null
    strategy: ""
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - medik8s
  - fencing
  - auto-healing
  - recovery
  - high-availability
  - fence-agents
  - fence-agents-remediation
  - remediation
  - far
  - baremetal
  links:
  - name: Fence Agents Remediation
    url: https://medik8s.io/fence-agents-remediation/fence-agents-remediation
  - name: Source Code
    url: https://github.com/medik8s/fence-agents-remediation
  maintainers:
  - email: medik8s@googlegroups.com
    name: Medik8s Team
  maturity: alpha
  minKubeVersion: 1.24.0
  provider:
    name: Medik8s
    url: https://github.com/medik8s
  version: 0.0.0
